using System;
using System.Collections.Generic;

class Program
{
    static void Main(string[] args)
    {
        Polynomials s = new Polynomials();
        Menu();
        check();


        void check()
        {
            int one = 0;
            while (one != -1)
            {
                Console.WriteLine("Enter the opearation you want to perform");
                one = Convert.ToInt32(Console.ReadLine());

                if (one == 1)
                {
                    Console.WriteLine("Enter a coefficient");
                    int x = Convert.ToInt32(Console.ReadLine());
                    Console.WriteLine("Enter a exponent");
                    int y = Convert.ToInt32(Console.ReadLine());
                    /*addTerm(x, y);*/
                    Term newTerm = new Term(x, y);
                    Polynomial p = new Polynomial();
                    p.AddTerm(newTerm);
                    s.Insert(p);
                    s.Print();
                }
                else if (one == 2)
                {
                    Console.WriteLine("Enter the first coefficient");
                    int x = Convert.ToInt32(Console.ReadLine());
                    Console.WriteLine("Enter the first exponent");
                    int y = Convert.ToInt32(Console.ReadLine());
                    /*addTerm(x2, y2);*/
                    Term newTerm = new Term(x, y);
                    Polynomial p = new Polynomial();
                    p.AddTerm(newTerm);
                    s.Insert(p);
                    Console.WriteLine("Enter the second coefficient");
                    int x2 = Convert.ToInt32(Console.ReadLine());
                    Console.WriteLine("Enter the second exponent");
                    int y2 = Convert.ToInt32(Console.ReadLine());
                    /*addTerm(x2, y2);*/
                    Term newTerm2 = new Term(x2, y2);
                    Polynomial q = new Polynomial();
                    s.Size();
                    q.AddTerm(newTerm2);
                    s.Insert(q);


                    Polynomial n = p + q;


                }

                else if (one == 3)
                {
                    Console.WriteLine("Enter the first coefficient");
                    int x = Convert.ToInt32(Console.ReadLine());
                    Console.WriteLine("Enter the first exponent");
                    int y = Convert.ToInt32(Console.ReadLine());
                    /*addTerm(x, y);*/
                    Term newTerm = new Term(x, y);
                    Polynomial p = new Polynomial();
                    p.AddTerm(newTerm);
                    s.Insert(p);
                    Console.WriteLine("Enter the second coefficient");
                    int x2 = Convert.ToInt32(Console.ReadLine());
                    Console.WriteLine("Enter the second exponent");
                    int y2 = Convert.ToInt32(Console.ReadLine());
                    /*addTerm(x2, y2);*/
                    Term newTerm2 = new Term(x2, y2);
                    Polynomial q = new Polynomial();
                    s.Size();
                    q.AddTerm(newTerm2);
                    s.Insert(q);



                    Polynomial n = p * q;

                    s.Insert(n);

                }

                else if (one == 4)
                {

                }



            }



        }








        void Menu()
        {
            Console.WriteLine("Menu");
            Console.WriteLine("Enter 1 to create a polynomial");
            Console.WriteLine("Enter 2 to Add polynomials");
            Console.WriteLine("Enter 3 to Multiply polynomials");
            Console.WriteLine("Enter 4 to delete polynomial");
            Console.WriteLine("Enter 5 to delete polynomials");
            Console.WriteLine("Enter 6 to clone polynomials");
            Console.WriteLine("Enter -1 to quit the application");
            Console.WriteLine("Enter the opearation you want to perform");

            check();
        }


    }


    // Task 1
    public class Term : IComparable
    {
        public double coefficient;
        public int exponent;



        public double Coefficient
        {
            get { return coefficient; }// Implement public read and write properties for each data member
            set { coefficient = value; }
        }

        public int Exponent
        {
            get { return exponent; }
            set
            {
                if (value < 0 || value > 20)// if value is less than 0 or greater than 20

                    exponent = value;
                else
                    throw new ArgumentException("The value is out of range.");// Implement public read and write properties for each data member
            }
        }


        public Term(double coefficient, int exponent) // Constructor: Creates a term with the given coefficient and exponent
        {
            this.coefficient = coefficient;
            this.exponent = exponent;

        }

        public double Evaluate(double x)// Evaluates the current term at x and returns the result
        {

            double result = coefficient * Math.Pow(x, exponent);
            return result;
        }

        public int CompareTo(Object obj)
        {
            Term o = obj as Term;

            if (obj != null)
            {

                if (Exponent < o.Exponent)
                {
                    return -1;
                }
                else if (Exponent == o.Exponent)
                {
                    return 0;
                }
                else
                {
                    return 1;
                }
            }

            else
            {
                throw new ArgumentException("This is not a term.");

            }


        }

        // Returns -1, 0, or 1 if the exponent of the current term 
        // is less than, equal to, or greater than the exponent of obj
        // Raises an ArgumentException if obj is either null or not a term


        public override string ToString()// Returns a string representation of the current term
        {

            if (coefficient == 0)
            {
                return "0";
            }
            else if (exponent == 0)
            {
                return coefficient.ToString();
            }
            else if (exponent == 1)
            {
                return $"{coefficient}x";
            }
            else
            {
                return $"{coefficient}x^{exponent}";
            }
        }
    }

    // Task 2
    public class Node<T>
    {
        public T Item { get; set; }
        public Node<T> Next { get; set; }
        public Node(T item, Node<T> next)
        {
            Item = item;
            Next = next;
        }
    }

    //Task 3
    public class Polynomial : ICloneable
    {
        // A reference to the first node of a singly linked list
        private Node<Term> front;
        // Creates the zero polynomial, i.e. 0
        public Polynomial()
        {
            front.Item.coefficient = 0;
            front.Item.exponent = -1;
        }
        //(2 marks)
        // Inserts term t into the current polynomial in its proper order
        // If a term with the same exponent already exists then the two terms are added together
        // If the two terms cancel out then no new term is created
        public void AddTerm(Term t)
        {

            Node<Term> newN = new Node<Term>(t, null);
            Node<Term> curr = front;
            Node<Term> prev = null;

            if (front == null)
            {
                front = newN;
            }
            else
            {
                while (curr != null && curr.Item.exponent > t.exponent)
                {
                    prev = curr;
                    curr = curr.Next;
                }
            }


            if (curr != null && curr.Item.exponent == t.exponent)
            {
                curr.Item.coefficient += t.coefficient;
            }
            else
            {
                //insert new term in right pos in linked list
                newN.Next = curr;
                if (prev == null)
                {
                    front = newN;
                }
                else
                {
                    prev.Next = newN;
                }
            }
        }
        //(7 marks)
        // Adds polynomials p and q to yield a new polynomial
        public static Polynomial operator +(Polynomial p, Polynomial q)
        {
            Polynomial n = new Polynomial();

            Node<Term> pcurr = p.front;
            Node<Term> qcurr = q.front;

            while (pcurr != null && qcurr != null)
            {
                if (pcurr.Item.exponent > qcurr.Item.exponent)
                {
                    n.AddTerm(new Term(pcurr.Item.coefficient, pcurr.Item.exponent));
                    pcurr = pcurr.Next;
                }
                else if (pcurr.Item.exponent < qcurr.Item.exponent)
                {
                    n.AddTerm(new Term(qcurr.Item.coefficient, qcurr.Item.exponent));
                    qcurr = qcurr.Next;
                }
                else
                {
                    n.AddTerm(new Term(pcurr.Item.coefficient + qcurr.Item.coefficient, pcurr.Item.exponent + qcurr.Item.exponent));
                    pcurr = pcurr.Next;
                    qcurr = qcurr.Next;
                }
            }
            //remaining terms from each seperate polynomial are added
            while (pcurr != null)
            {
                n.AddTerm(new Term(pcurr.Item.coefficient, pcurr.Item.exponent));
                pcurr = pcurr.Next;
            }

            while (qcurr != null)
            {
                n.AddTerm(new Term(qcurr.Item.coefficient, qcurr.Item.exponent));
                qcurr = qcurr.Next;
            }

            return n;
        }
        //(3 marks)
        // Multiplies polynomials p and q to yield a new polynomial
        public static Polynomial operator *(Polynomial p, Polynomial q)
        {
            Polynomial r = new Polynomial();

            Node<Term> pcurr = p.front;
            while (pcurr != null)
            {
                Node<Term> qcurr = q.front;

                while (qcurr != null)
                {
                    double coprod = pcurr.Item.coefficient * qcurr.Item.coefficient;
                    int exprod = pcurr.Item.exponent + qcurr.Item.exponent;
                    r.AddTerm(new Term(coprod, exprod));
                    qcurr = qcurr.Next;

                }
                pcurr = pcurr.Next;
            }
            return r;
        }
        //(5 marks)
        // Evaluates the current polynomial at x and returns the result
        public double Evaluate(double x)
        {
            double eval = 0;
            Node<Term> curr = front;

            while (curr != null)
            {
                eval += curr.Item.coefficient * Math.Pow(x, curr.Item.exponent);
                curr = curr.Next;
            }
            return eval;
        }
        //(3 marks)
        // Creates and returns a clone of the current polynomial except that the exponents
        // of the current polynomial are assigned to the coefficients of the clone in reverse order
        // For example, 4x^3 – 3x + 9 is cloned as 9x^3 – 3x + 4
        public Object Clone()
        {
            Polynomial clone = new Polynomial();
            Node<Term> curr = front;
            Stack<int> S = new Stack<int>(); // Stack of exponents

            while (curr != null)
            {
                S.Push(curr.Item.exponent);
                curr = curr.Next;
            }
            while (S.Count > 0)
            {
                int exp = S.Pop();
                double coef = 0;
                Node<Term> og = front;

                while (og != null)
                {
                    if (og.Item.exponent == exp)
                    {
                        coef = og.Item.coefficient;
                        break;
                    }
                    og = og.Next;
                }
                clone.AddTerm(new Term(coef, exp));
            }
            return clone;

        }
        // (4 marks)
        // Prints the current polynomial
        public void Print()
        {
            Node<Term> curr = front;
            while (curr != null)
            {
                Console.Write(curr.Item.ToString());
                if (curr.Next != null)
                {
                    Console.Write(" + ");
                }
                curr = curr.Next;
            }
            Console.WriteLine();
        }
    }


    //Task 4
    class Polynomials
    {

        // A collection of polynomials
        private List<Polynomial> L;
        // Creates an empty list L of polynomials
        public Polynomials()
        {
            L = new List<Polynomial>();
        }
        // Retrieves the polynomial stored at position i in L
        public Polynomial Retrieve(int i)
        {
            return L[i];
        }
        // Inserts polynomial p into L

        public void Insert(Polynomial p)
        {
            L.Add(p);
        }

        // Deletes the polynomial at index i
        public void Delete(int i)
        {
            if (i >= 0 && i < L.Count)
            {
                L.RemoveAt(i);
            }
        }
        // Returns the number of polynomials in L
        public int Size()
        {
            return L.Count;
        }
        // Prints out the list of polynomials
        public void Print()
        {
            for (int i = 0; i < L.Count; i++)
            {
                Console.WriteLine(L[i]);
            }
        }

    }
}
